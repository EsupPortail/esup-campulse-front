/**
 * Base palette
 * Based on association directory colors
 */
$lightest-color: #e7efff;
$lighter-color: #aeb8c4;
$light-color: #6290D0;
$base-color: #3971be;
$dark-color: #3065b4;
$darker-color: #285496;
$darkest-color: #152639;

/**
 * Function defining the difference between 2 colors
 * Source : https://www.sitepoint.com/using-sass-build-color-palettes/
 */
@function color-diff($a, $b) {
  $sat: saturation($a) - saturation($b);
  $lig: lightness($a) -  lightness($b);
  $fn-sat: if($sat > 0, 'desaturate', 'saturate');
  $fn-lig: if($lig > 0, 'darken', 'lighten');

  @return (
          adjust-hue: -(hue($a) - hue($b)),
          #{$fn-sat}: abs($sat),
          #{$fn-lig}: abs($lig)
  );
}

/**
 * Compute the diff for each color from the initial palette
 */
@function palette-diff($palette) {
  $base: map-get($palette, base);
  $colors: map-get($palette, colors);

  $diffs: ();

  @each $color in $colors {
    $diffs: append($diffs, color-diff($base, $color));
  }

  @return $diffs;
}

/**
 * Initial palette used to define the diff between the base color and each color from the palette. There can be as many colors as one wants.
 * Based on association directory colors.
 */
$base-palette: (
        'base': $base-color,
        'colors': $lightest-color $lighter-color $light-color $base-color $dark-color $darker-color $darkest-color,
) !default;

/**
 * Palette diffs
 */
$palette-diffs: palette-diff($base-palette);

/**
 * Apply differences returned from `color-diff` function to a color in order to retrieve the second color
 */
@function apply-diff($color, $diff) {
  @each $key, $value in $diff {
    $color: call($key, $color, $value);
  }

  @return $color;
}

/**
 * Create a palette from a base color and returns a list of colors
 */
@function create-palette($base-color, $is-light-color) {
  $colors: ();

  @each $diff in $palette-diffs {
    $colors: append($colors, apply-diff($base-color, $diff, $is-light-color));
  }

  @return $colors;
}

/**
 * Create a list of colors from the base color
 * then turn in into a map with explicit keys
 */
@function palette($base-color, $is-light-color) {
  $colors: create-palette($base-color, $is-light-color);
  $keys: 'lightest' 'lighter' 'light' 'base' 'dark' 'darker' 'darkest';
  $palette: ();

  @for $i from 1 through min(length($colors), length($keys)) {
    $palette: map-merge($palette, (nth($keys, $i): nth($colors, $i)));
  }

  @return $palette;
}

/**
 * Helpers to call the right color generated by the palette
 */
@function lightest($palette) {
  @if not map-has-key($palette, 'lightest') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `lightest`.";
  }
  @return map-get($palette, 'lightest');
}

@function lighter($palette) {
  @if not map-has-key($palette, 'lighter') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `lighter`.";
  }
  @return map-get($palette, 'lighter');
}

@function light($palette) {
  @if not map-has-key($palette, 'light') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `light`.";
  }
  @return map-get($palette, 'light');
}

@function dark($palette) {
  @if not map-has-key($palette, 'dark') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `dark`.";
  }
  @return map-get($palette, 'dark');
}

@function darker($palette) {
  @if not map-has-key($palette, 'darker') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `darker`.";
  }
  @return map-get($palette, 'darker');
}

@function darkest($palette) {
  @if not map-has-key($palette, 'darkest') {
    @warn "`#{inspect($palette)}` doesn't seem to have a key named `darkest`.";
  }
  @return map-get($palette, 'darkest');
}